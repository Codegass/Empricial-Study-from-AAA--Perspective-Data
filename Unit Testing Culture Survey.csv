Questions,Q1,Q2,Q3,Q4,Q5,Q7,Q8,Q9,Q10,Q11,Q12,Q13,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31,Q32,Q33,Q34,Q35
orgnization Type,How many years have you been involved in software development?,What type of software development projects do you primarily work on? - Selected Choice,What is your primary occupation related to software development or open-source projects? - Selected Choice,How integral is unit testing to your development workflow?,How would you rate the impact of unit testing on the maintainability of code?,How would you rate the impact of unit testing on the ease of debugging and early bug detection?,How would you rate the impact of unit testing on code documentation and understanding for new developers?,What are the main challenges you face in unit testing? - Selected Choice,What do you believe is an appropriate minimal code coverage target for unit tests?,Please select your frequently used Java Testing Frameworks(s) - Selected Choice,Please select your frequently used Java Mocking Frameworks(s) - Selected Choice,Please specify the JUnit version you are familiar with.,Please rate your knowledge of using the Assumptions API.    (org.junit.jupiter.api.Assumptions),Please rate your knowledge of @Nested Test Classes annotation,Please rate your knowledge of @ParameterizedTest Annotation,Please rate your knowledge of @RepeatedTest Annotation,Please rate your knowledge of assertThrows API.     (org.junit.jupiter.api.Assertions.assertThrows),"Please rate your knowledge of expected attribute of the @Test annotation. For example, @Test(expected = NullPointerException.class)",Please rate your knowledge of Assume API.    (org.junit.Assume),Please rate your knowledge of assertThrows API.    (org.junit.Assert.assertThrows),Does the open source community you mainly contribute to provide clear guidelines on unit test practices?,"Based on your experience, how would you describe the strictness of unit test case standards within the open source community you mainly contribute to?",You've indicated that the open source community you mainly contribute to has low to no observable standards for unit testing. Can you share your reasons or experiences that led you to this conclusion?,Could you describe what these standards entail based on your experience? Are there specific guidelines or practices that you've observed that reflect this balanced approach?,"Could you elaborate on what makes these standards strict in your view? If possible, could you please share any specific guidelines, requirements, or practices that exemplify this strictness?",Can you name any open source projects that you believe excel in unit testing quality and explain briefly why?,Could you specify or describe some of the unit testing guidelines provided by the open source community you mainly contribute to? A reference link will be the best.,How do you rate the feedback quality on pull requests with unit tests in your primary open source community?,Rate the overall quality of unit testing in the projects you have mainly contributed to,Rate your level of expertise with the Arrange-Act-Assert (AAA) pattern in unit testing,How often do you structure your test cases according to the AAA pattern?,What are the main benefits or drawbacks you have experienced when using the AAA pattern in unit testing? Please share specific examples or observations.,"Have you encountered any specific challenges or limitations when applying the AAA pattern in complex testing scenarios? 

For context, 'complex testing scenarios' can refer to tests involving multiple dependencies, requiring extensive mock setups, or testing intricate business logic. Please describe your experiences."
Community-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,It's a fundamental part of my development process.,8,9,4,Maintaining test relevance and accuracy over time.,More than 75%,"JUnit,Other -- Please specify","Mockito,EasyMock","JUnit 4,JUnit 5",10,0,10,7,10,0,10,10,No,5,,Tests should cover basic functionality and secondary tests should be significantly randomized to cover invariants,,Apache Lucene due to its heavy use of randomization and the testing frameworks it has build and released as stand alone. Ie RandmoizedRunner LuceneTestCase and forbidden APIs as well as its use of the Java security manager,,5,10,0,0,Never heard of it,Mocks usually are a code smell to me. Interaction over network etc should rather be integration tests.
Community-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,It's a fundamental part of my development process.,10,10,8,Maintaining test relevance and accuracy over time.,50-75%,JUnit,Other -- Please specify,JUnit 5,9,5,10,9,10,,,,Yes,5,,depends the community but generally it is about ensuring the PR actually fixes something by having a failling test without the change + (for some communities) an addtional IT test,,"Hmm, this is a hard question but I can name one which is pretty bad: Apache Beam. It is very strict in terms of testing and style but the actual coverage is quite low due to a lot of mocking. I think Apache Maven approach being closer to real runtime is more accurate.",Not the most explicit but main doc is the existing tests themselves but here is some html: https://maven.apache.org/plugin-developers/plugin-testing.html,6,7,7,5,It is often needed by design but enforcing a style or framework for that does not have a real ROI in practise. Most relevant stack to use it is BDD and it is quite rare in practise.,Sometimes it is overcomplex (unit tests). For complex cases I tend to mock external systems but never internal ones.
Corporate-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,It's a fundamental part of my development process.,8,8,5,"Lack of time or resources to write and maintain tests.,Difficulty in writing tests for complex or legacy code.,Inadequate support or understanding of unit testing within the team.,Challenges in integrating unit tests with continuous integration/continuous deployment (CI/CD) pipelines.",More than 75%,JUnit,Mockito,"JUnit 4,JUnit 5",6,0,7,0,10,5,0,10,Yes,7,,"tests structure, how to run them, required coverage",,,nothing that comes to mind,4,7,7,7,sometimes too verbose when testing simple things like defensive statements etc,
Corporate-driven OSC,More than 5 years,Others - Please specify,Developer,It's a fundamental part of my development process.,10,10,10,Difficulty in writing tests for complex or legacy code.,Code coverage is not a reliable measure of unit test quality and should not be the primary standard.,JUnit,"Mockito,Other -- Please specify",JUnit 4,,,,,,10,10,10,Yes,10,,,"The OSS project I contribute to originates from Google, which has strict standards for testing.",Not really.,The Google SWE book must cover this.,8,10,10,10,"Clarity: the sections are distinct, and it's helpful to see them clearly separated.",-
Community-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,"I use it when it seems necessary, but it's not systematic",8,8,7,Challenges in integrating unit tests with continuous integration/continuous deployment (CI/CD) pipelines.,50-75%,JUnit,Mockito,JUnit 5,8,9,9,7,8,,,,No,5,,Adhoc,,,,6,8,10,10,Clarity,Fixture setup; we use an inmemory database and do it programmatically 
Community-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,It's a fundamental part of my development process.,10,10,6,"Difficulty in writing tests for complex or legacy code.,Complexity in setting up realistic test environments.",More than 75%,JUnit,Mockito,JUnit 4,,,,,,7,6,9,Yes,9,,,every code check-in should have unit tests,Geode,Geode,9,9,6,7,Not sure,not sure
Community-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,It's a fundamental part of my development process.,10,10,8,Complexity in setting up realistic test environments.,Code coverage is not a reliable measure of unit test quality and should not be the primary standard.,JUnit,Mockito,JUnit 4,,,,,,9,5,8,Yes,6,,"New features & fixed bugs should always have a test.  Tests should be fast.  Test should not be time based (ie, will return different results depending on what type of machine they are run on or how busy the machine is).",,,https://cwiki.apache.org/confluence/display/Hive/HiveDeveloperFAQ#HiveDeveloperFAQ-Testing,5,6,0,0,None,N/A
Corporate-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,It's a fundamental part of my development process.,8,8,9,"Difficulty in writing tests for complex or legacy code.,Inadequate support or understanding of unit testing within the team.",Code coverage is not a reliable measure of unit test quality and should not be the primary standard.,TestNG,Mockito,,,,,,,,,,Yes,9,,,"having examples, code-coverage, public-API validation and more",https://github.com/fluentassertions/fluentassertions ,https://github.com/fluentassertions/fluentassertions/blob/develop/CONTRIBUTING.md,9,9,9,9,adds great documentation to the specific API being tested,for integration tests
Community-driven OSC,More than 5 years,"Web Technology: Projects related to the development of web applications, services, and APIs. This includes everything from front-end web development (using frameworks like React, Angular) to back-end development (e.g., using Node.js, Django) and full-stack development projects.
","Developer,Project/People Manager","I use it when it seems necessary, but it's not systematic",9,4,4,Lack of time or resources to write and maintain tests.,Code coverage is not a reliable measure of unit test quality and should not be the primary standard.,JUnit,Mockito,"JUnit 4,JUnit 5",1,1,8,3,10,10,1,10,Yes,5,,"Errors, reported by users are converted to unit tests to avoid regressions",,"Apache Wicket, Apache OpenMeetings we can rely on results of unit test during upgrades.",Add test in case you are adding/changing something,8,7,10,10,To be fair I never heard about AAA (just have Google it) BUT almost all my tests fits this pattern due to the fact I can't imagine other way of testing :))),no
Corporate-driven OSC,2 - 5 years,"Infrastructure, Networking & IoT: Projects that involve the development of software for managing networks, infrastructure automation, cloud services, or Internet of Things (IoT) devices. Examples include network configuration tools, cloud management platforms, and software for IoT devices.
",Developer,It's a fundamental part of my development process.,10,8,3,"Lack of time or resources to write and maintain tests.,Difficulty in writing tests for complex or legacy code.,Complexity in setting up realistic test environments.,Maintaining test relevance and accuracy over time.",50-75%,JUnit,Mockito,JUnit 4,,,,,,0,0,8,Yes,10,,,"Our team contribute directly to GitHub. I don't know if we have a published unit testing standards, but the rule of thumb is every non-trivial code addition should be accompanied by some sort of tests.",,"Maybe take a look at androidx, or in general any Google open source project",2,10,8,10,It's the paradigm we follow. But the set up and test code (arrange + act) can be long and not very easy to follow,"We avoid mocks or fakes when possible. But sometimes there could be long set up code, or peripheral code to set up the test for the real component bounded by stable API. And it's also true sometimes some component is final so we can't mock it easily. "
Corporate-driven OSC,More than 5 years,"Development & Testing: Projects focused on creating tools, libraries, or frameworks that aid in software development and testing processes. Examples include integrated development environments (IDEs), testing frameworks (e.g., JUnit, Selenium), and build tools (e.g., Maven, Gradle).",Developer,It's a fundamental part of my development process.,7,9,8,"Complexity in setting up realistic test environments.,Maintaining test relevance and accuracy over time.",Code coverage is not a reliable measure of unit test quality and should not be the primary standard.,JUnit,Mockito,JUnit 4,,,,,,2,0,10,Yes,8,,,"The code is maintained by the people who created code standards for my entire organization, so they care deeply about standards, correctness, readability, and style. They will correct you and make suggestions in code review (I see this as a very positive thing).",,https://google.github.io/styleguide/javaguide.html,9,9,9,9,"I generally find AAA easy to follow. But I don't like AAA comments (e.g. ""// ARRANGE"") in the code, which I have seen somewhat frequently.",Sometimes the line between the different stages is blurry (especially with mocks -- a statement can both act as arranging and asserting).